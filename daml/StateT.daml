module StateT where

import DA.Action.State.Class
import Daml.Script

data StateT s m a = StateT
    { runStateT: s -> m (a, s) }

instance (Applicative m, Action m) => Functor (StateT s m) where
 fmap f (StateT runState) = StateT $ (\s -> do
   (a, s)<- runState s
   pure (f a, s))

instance (Applicative m, Action m) => Applicative (StateT s m) where
 pure a = StateT $ \s -> pure (a, s)

 StateT mf <*> StateT mx = StateT $ \ s -> do
  (f, s') <- mf s
  (x, s'') <- mx s'
  pure (f x, s'')

instance (Applicative m, Action m) => Action (StateT s m) where
  m >>= k  = StateT $ \ s -> do
    (a, s') <- runStateT m s
    runStateT (k a) s'

state: (Action m)
      => (s -> (a, s))  -- ^pure state transformer
      -> StateT s m a   -- ^equivalent state-passing computation
state f = StateT (pure . f)

instance Action m => ActionState s (StateT s m) where
  get = state $ \ s -> (s, s)
  put s = state $ \ _ -> ((), s)
  modify f = state $ \ s -> ((), f s)

class LiftScript m where
  liftScript: Script a -> m a

instance LiftScript Script where
  liftScript action = action

instance (Applicative m, LiftScript m, Action m) => LiftScript (StateT s m) where
  liftScript action =
    StateT $ (\s -> do
               a <- liftScript action
               pure (a,s))

runState: s -> StateT s m a -> m (a, s)
runState s (StateT f) = f s
