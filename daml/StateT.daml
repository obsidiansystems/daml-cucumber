{-|
Module      : StateT
Description : State monad transformer for daml
Copyright   : (c) Obsidian Systems LLC, 2024
License     : BSD-3-Clause
Maintainer  : maintainer@obsidian.systems

State monads, passing an updatable state through a computation.
-}
module StateT where

import DA.Action.State.Class
import DA.Functor (($>))
import DA.Tuple (dupe, first)

data StateT s m a = StateT
  { runStateT : s -> m (a, s) }

instance Functor m => Functor (StateT s m) where
  fmap f (StateT runState) = StateT $ fmap (first f) . runState

instance Action m => Applicative (StateT s m) where
  pure a = StateT $ pure . (a, )

  StateT mf <*> StateT mx = StateT $ \s -> do
    (f, s') <- mf s
    (x, s'') <- mx s'
    pure (f x, s'')

instance Action m => Action (StateT s m) where
  m >>= k  = StateT $ \s -> do
    (a, s') <- runStateT m s
    runStateT (k a) s'

instance ActionFail m => ActionFail (StateT s m) where
  fail m = StateT $ \s -> fail m $> (undefined, s)

instance CanAssert m => CanAssert (StateT s m) where
  assertFail m = StateT $ \s -> assertFail m $> (undefined, s)

state
  : Applicative m
  => (s -> (a, s))  -- ^pure state transformer
  -> StateT s m a   -- ^equivalent state-passing computation
state = StateT . (pure .)

instance Applicative m => ActionState s (StateT s m) where
  get = state dupe
  put = state . const . ((), )
  modify = state . (((), ) .)

gets : (Functor m, ActionState s m) => (s -> a) -> m a
gets = (<$> get)

runState: s -> StateT s m a -> m (a, s)
runState = flip runStateT
