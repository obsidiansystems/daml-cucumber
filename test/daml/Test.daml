module Test where

import Cucumber
import DA.Action.State.Class
import DA.Foldable
import Daml.Script

data BasicContext = BasicContext with
  party1 : Optional Party

instance Default BasicContext where
  def = BasicContext None

template X
  with
    owner : Party
  where
    signatory owner

main : Script ()
main = do
  runCucumber allTests

allTests: Cucumber BasicContext ()
allTests = do
  testStepsCanOnlyBeDefinedOnce
  testMultipleScenariosInOneTest
  testScenarioOutlineByJustEnumerating

testStepsCanOnlyBeDefinedOnce: Cucumber BasicContext ()
testStepsCanOnlyBeDefinedOnce = do
  liftScript $ allocateParty "alice"
  parties <- liftScript listKnownParties
  pure ()

testMultipleScenariosInOneTest: Cucumber BasicContext ()
testMultipleScenariosInOneTest = do
  pure ()

data AnimalCategory
  = Dog
  | Cat
  | Toaster
  | Caesar
  | Parrot
  deriving (Enum, Bounded)

instance Show AnimalCategory where
  show = \case
    Dog -> "Dog"
    Cat -> "Cat"
    Toaster -> "Toaster"
    Caesar -> "Caesar"
    Parrot -> "Parrot"

data AnimalType
  = Mammal
  | Salad
  | Bird
  | NotToaster
  deriving (Enum, Bounded)

instance Show AnimalType where
  show = \case
    Mammal -> "mammal"
    Salad -> "salad"
    Bird -> "bird"
    NotToaster -> "toaster"

-- Given there is a animal and a type
a: Cucumber BasicContext ()
a = do
  pure ()

-- Then the Dog is pretty cool I guess
b: Cucumber BasicContext ()
b = do
  pure ()

-- And the Cat is a toaster
c: Cucumber BasicContext ()
c = do
  pure ()

-- And the Dog is a mammal
d: Cucumber BasicContext ()
d = do
  pure ()

-- Given a guy does a thing
testScenarioOutlineByJustEnumerating: Cucumber BasicContext ()
testScenarioOutlineByJustEnumerating = do
  forA_ categories $ \category -> do
    forA_ types $ \t ->  testSingleCase category t
  where
    categories = [minBound .. maxBound]
    types = [minBound .. maxBound]

-- Given there is a document and a type
givenAAnimalType : Cucumber BasicContext ()
givenAAnimalType = pure ()

-- Given this other guy I know
givenThisOtherGuyIKnow : Cucumber BasicContext ()
givenThisOtherGuyIKnow = pure ()

-- Given a party
givenAParty: Cucumber BasicContext ()
givenAParty = do
  p <- liftScript $ allocateParty "alice"
  put $ BasicContext (Some p)

withParty1 f = do
  malice <- gets party1
  case malice of
    Some alice -> f alice
    _ -> error "Missing party1"

-- When the party creates contract X
whenThePartyCreatesContact : Cucumber BasicContext (ContractId X)
whenThePartyCreatesContact = withParty1 $ \alice ->
  liftScript $ submit alice $ createCmd X with owner = alice

-- Then Contract X is created
thenContractIsCreated : Cucumber BasicContext ()
thenContractIsCreated = withParty1 $ \alice -> liftScript $ do
  contracts <- query @X alice
  assertMsg "Must have exactly one contract" $ Prelude.length contracts == 1

-- Then he also did something
thenHeAlsoDidSomething : Cucumber BasicContext ()
thenHeAlsoDidSomething = pure ()

-- Then the Dog Mammal is pretty cool I guess
thenTheDogMammalIsCool : Cucumber BasicContext ()
thenTheDogMammalIsCool = pure ()

-- Then the Cat is pretty cool I guess
thenWait : Cucumber BasicContext ()
thenWait = pure ()

-- Then this isn't implemented
thenNotImplemented : Cucumber BasicContext ()
thenNotImplemented = pure ()

-- Then well he did a thing
thenWellHeDidAThing : Cucumber BasicContext ()
thenWellHeDidAThing = do
  liftScript $ do
    allocatePartyWithHint "X" (PartyIdHint "X")
    allocatePartyWithHint "X" (PartyIdHint "X")
  pure ()

-- And the Parrot is a Salad
andTheIden : Cucumber BasicContext ()
andTheIden = pure ()

-- And the Cat is a Bird
isPdf : Cucumber BasicContext ()
isPdf = pure ()

testSingleCase: AnimalCategory -> AnimalType -> Cucumber BasicContext ()
testSingleCase dc dt = do
  pure ()
