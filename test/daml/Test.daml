module Test where

import Cucumber
import DA.Action
import DA.Action.State.Class
import DA.Either
import DA.Exception
import DA.Foldable
import DA.Optional
import DA.Set
import DA.Stack
import Daml.Script
import StateT

template X
  with
    owner : Party
  where
    signatory owner

main : Script [Message]
main = do
  (_, ctx) <- runCucumber allTests
  pure ctx.results

allTests: Cucumber ()
allTests = do
  testStepsCanOnlyBeDefinedOnce
  testMultipleScenariosInOneTest
  testScenarioOutlineByJustEnumerating

testStepsCanOnlyBeDefinedOnce: Cucumber ()
testStepsCanOnlyBeDefinedOnce = do
  step Given "a party"
  liftScript $ allocateParty "alice"
  step Given "a party"
  step When "the party creates contract X"
  parties <- liftScript listKnownParties
  step Then "Contract X is created"

testMultipleScenariosInOneTest: Cucumber ()
testMultipleScenariosInOneTest = do
  scenario' "A something that can be tested"
   -- ^ Note you can optionally define the Scenario if you wanna, though you don't have to
  step Given "a guy does a thing"
  step Then "well he did a thing"

  scenario' "Something else that can be tested"
  step Given "this other guy I know"
  step Then "he also did something"
  pure ()

data AnimalCategory
  = Dog
  | Cat
  | Toaster
  | Caesar
  | Parrot
  deriving (Enum, Bounded)

instance Show AnimalCategory where
  show = \case
    Dog -> "Dog"
    Cat -> "Cat"
    Toaster -> "Toaster"
    Caesar -> "Caesar"
    Parrot -> "Parrot"

data AnimalType
  = Mammal
  | Salad
  | Bird
  | NotToaster
  deriving (Enum, Bounded)

instance Show AnimalType where
  show = \case
    Mammal -> "mammal"
    Salad -> "salad"
    Bird -> "bird"
    NotToaster -> "toaster"

-- Given there is a animal and a type
a: Cucumber ()
a = do
  pure ()

-- Then the Dog is pretty cool I guess
b: Cucumber ()
b = do
  pure ()

-- And the Cat is a toaster
c: Cucumber ()
c = do
  pure ()

-- And the Dog is a mammal
d: Cucumber ()
d = do
  pure ()

-- Given a guy does a thing
testScenarioOutlineByJustEnumerating: Cucumber ()
testScenarioOutlineByJustEnumerating = do
  step Given "there is a animal and a animal type"
  forA_ categories $ \category -> do
    forA_ types $ \t ->  testSingleCase category t
    step Then $ "the " <> show category <> " is pretty cool I guess"
  where
    categories = [minBound .. maxBound]
    types = [minBound .. maxBound]

-- Given there is a document and a type
givenAAnimalType : Cucumber ()
givenAAnimalType = pure ()

-- Given this other guy I know
givenThisOtherGuyIKnow : Cucumber ()
givenThisOtherGuyIKnow = pure ()

-- Given a party
givenAParty: Cucumber Party
givenAParty = liftScript $ allocateParty "alice"

-- When the party creates contract X
whenThePartyCreatesContact : Cucumber (ContractId X)
whenThePartyCreatesContact = liftScript $ do
  [alice] <- listKnownParties
  submit alice.party $ createCmd X with owner = alice.party

-- Then Contract X is created
thenContractIsCreated : Cucumber ()
thenContractIsCreated = liftScript $ do
  [alice] <- listKnownParties
  contracts <- query @X alice.party
  assertMsg "Must have exactly one contract" $ Prelude.length contracts == 1

-- Then he also did something
thenHeAlsoDidSomething : Cucumber ()
thenHeAlsoDidSomething = pure ()

-- Then the Dog Mammal is pretty cool I guess
thenTheDogMammalIsCool : Cucumber ()
thenTheDogMammalIsCool = pure ()

-- Then the Cat is pretty cool I guess
thenWait : Cucumber ()
thenWait = pure ()

-- Then this isn't implemented
thenNotImplemented : Cucumber ()
thenNotImplemented = pure ()

-- Then well he did a thing
thenWellHeDidAThing : Cucumber ()
thenWellHeDidAThing = do
  liftScript $ do
    allocatePartyWithHint "X" (PartyIdHint "X")
    allocatePartyWithHint "X" (PartyIdHint "X")
  pure ()

-- And the Parrot is a Salad
andTheIden : Cucumber ()
andTheIden = pure ()

-- And the Cat is a Bird
isPdf : Cucumber ()
isPdf = pure ()

testSingleCase: AnimalCategory -> AnimalType -> Cucumber ()
testSingleCase dc dt = do
  step And $ "the " <> show dc <> " is a " <> show dt
