module Test where

import DA.Foldable
import DA.Stack
import DA.Action
import DA.Set
import Daml.Script
import DA.Exception
import DA.Either
import StateT
import DA.Action.State.Class
import Tester

main : Script [Message]
main = do
  (_, ctx) <- runTester allTests
  pure ctx.results

allTests: Tester ()
allTests = do
  testStepsCanOnlyBeDefinedOnce
  testMultipleScenariosInOneTest
  testScenarioOutlineByJustEnumerating

testStepsCanOnlyBeDefinedOnce: Tester ()
testStepsCanOnlyBeDefinedOnce = do
  step Given "a party"
  liftScript $ allocateParty "alice"
  step Given "a party"
  step When "the party creates contract X"
  parties <- liftScript listKnownParties
  step Then "Contract X is created"

testMultipleScenariosInOneTest: Tester ()
testMultipleScenariosInOneTest = do
  scenario' "A something that can be tested"
   -- ^ Note you can optionally define the Scenario if you wanna, though you don't have to
  step Given "a guy does a thing"
  step Then "well he did a thing"

  scenario' "Something else that can be tested"
  step Given "this other guy I know"
  step Then "he also did something"
  pure ()

data Owner = Cat

data AnimalCategory
  = Dog
  | Cat
  | Toaster
  | Caesar
  | Parrot
  deriving (Enum, Bounded)

instance Show AnimalCategory where
  show = \case
    Dog -> "Dog"
    Cat -> "Cat"
    Toaster -> "Toaster"
    Caesar -> "Caesar"
    Parrot -> "Parrot"

data AnimalType
  = Mammal
  | Salad
  | Bird
  | Toaster
  deriving (Enum, Bounded)

instance Show AnimalType where
  show = \case
    Mammal -> "mammal"
    Salad -> "salad"
    Bird -> "bird"
    Toaster -> "toaster"

testScenarioOutlineByJustEnumerating: Tester ()
testScenarioOutlineByJustEnumerating = do
  step Given "there is a animal and a animal type"
  forA_ categories $ \category -> do
    forA_ types $ \t ->  testSingleCase category t
    step Then $ "the " <> show category <> " is pretty cool I guess"
  where
    categories = [minBound .. maxBound]
    types = [minBound .. maxBound]

testSingleCase: AnimalCategory -> AnimalType -> Tester ()
testSingleCase dc dt = do
  step And $ "the " <> show dc <> " is a " <> show dt
